/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

/* Layer definitions */

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/*
 * Keyboard Configuration
 * All behaviors, macros and keymap definitions are contained within the / { ... } node.
 */

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        select_forward: select_forward {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&extend_word_right>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_backward: select_backward {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_left>, <&extend_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_line_forward: select_line_forward {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&extend_line_right>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_line_backward: select_line_backward {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_left>, <&extend_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        /* Status and System Control Macros */

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
            wait-ms = <0>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
            wait-ms = <0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
            wait-ms = <0>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
            wait-ms = <0>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
            wait-ms = <0>;
        };

        bt_4: bt_4 {
            compatible = "zmk,behavior-macro";
            label = "BT_4";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 4>;
            wait-ms = <0>;
        };

        /* Text Selection and Navigation Macros */

        select_none: select_none {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
        };

        extend_word_right: extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp LC(LS(RIGHT))>;
        };

        extend_word_left: extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp LC(LS(LEFT))>;
        };

        select_line_right: select_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp HOME &kp LS(END)>;
        };

        select_line_left: select_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp END &kp LS(HOME)>;
        };

        extend_line_right: extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
        };

        extend_line_left: extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings = <&kp LS(UP) &kp LS(HOME)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /* Base layer with default key mappings */

        DefaultWin {
            /* ---------------------------------------------------------------------------------------------------------------------------------
             * |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
             * |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
             * |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
             * |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
             * |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
             * | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |
             */

            bindings = <
&kp F1         &kp F2    &kp F3   &kp F4    &kp F5                                                                                                                                &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL      &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                                                             &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB        &kp Q     &kp W    &kp E     &kp R      &kp T                                                                                                              &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC        &kp A     &kp S    &kp D     &kp F      &kp G                                                                                                              &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp BACKSPACE  &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT        &kp LEFT_SHIFT    &layer_td         &kp LGUI          &kp RCTRL         &kp RSHFT         &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp INT_RO
&magic 3 0     &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &mt LCTRL SPACE  &lt 1 LANGUAGE_2  &lt 1 LANGUAGE_2  &mt RSHIFT ENTER  &lt 2 LANGUAGE_1  &mt RSHIFT ENTER          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PIPE
            >;
        };

        /* Navigation and keypad layer */

        Navigation {
            /* ---------------------------------------------------------------------------------------------------------------------------------
             * | BRIDN | BRIUP | PREV | NEXT  | PLAY  |                                                               | MUTE  | VOLDN | VOLUP |  ---  | PAUSE |
             * | trans | SELWR |  --- |  ---  |  ---  | HOME |                                                 | LPAR | KPNUM | KPEQL | KPDIV | KPMUL | PSCR  |
             * | trans |  ---  |  --- |  UP   |  ---  | END  |                                                 | RPAR | KP_7  | KP_8  | KP_9  | MINUS | SLCK  |
             * | trans |  ---  | LEFT | DOWN  | RIGHT | PGUP |                                                 | LEFT | DOWN  |  UP   | RIGHT | PLUS  |  ---  |
             * | trans | MENU  |  --- | F11   | F12   | PGDN | trans | trans | trans | trans | trans | trans  | COMMA| KP_1  | KP_2  | KP_3  | ENTER | trans |
             * | trans | CAPS  | INS  | F11   | F12   |      | trans | trans | trans | trans | trans | trans  |      | KP_0  | KP_0  | KP_DOT| ENTER | trans |
             */

            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP        &kp C_PREV       &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &select_word_right  &none            &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none               &select_forward  &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none               &kp LEFT         &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp LEFT   &kp DOWN    &kp UP_ARROW  &kp RIGHT      &kp KP_PLUS      &none
&trans        &kp K_CMENU         &none            &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &trans  &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS            &kp INS          &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        /* Numeric keypad and mouse movement layer */

        tri-upper {
            /* ---------------------------------------------------------------------------------------------------------------------------------
             * | N0   | N6   | N2   | N8    | N4    |                                                               | N4   | N8   | N2   | N6   | N0   |
             * | N1   | N7   | N3   | N9    | N5    | N0   |                                                 | N0   | N5   | N9   | N3   | N7   | N1   |
             * | N2   | N8   | N4   | UP    | N6    | N1   |                                                 | N1   | N6   | N0   | N4   | N8   | N2   |
             * | N3   | N9   | LEFT | DOWN  | RIGHT | N2   |                                                 | N2   | N7   | N1   | N5   | N9   | N3   |
             * | N4   | N0   | N6   | N2    | N8    | N3   | N4   | N5   | N6   | N6   | N5   | N4   | N3   | N8   | N2   | N6   | N0   | N4   |
             * | N5   | N1   | N7   | N3    | N9    |      | N7   | N8   | N9   | N9   | N8   | N7   |      | N9   | N3   | N7   | N1   | N5   |
             */

            bindings = <
&kp N0  &kp N6  &kp N2          &kp N8          &kp N4                                                                           &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3          &kp N9          &kp N5           &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4          &mmv MOVE_UP    &kp N6           &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6          &kp N2          &kp N8           &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7          &kp N3          &kp N9                   &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        /* System control and RGB configuration layer */

        magic_layer {
            /* ---------------------------------------------------------------------------------------------------------------------------------
             * | BTCLR | ---  | ---  | ---   | ---   |                                                               | ---  | ---  | ---  | ---  | BTCLA |
             * | ---   | ---  | ---  | ---   | ---   | ---  |                                                 | ---  | ---  | ---  | ---  | ---  | ---   |
             * | ---   | SPI  | SAI  | HUI   | BRI   | TOG  |                                                 | ---  | ---  | ---  | ---  | ---  | ---   |
             * | BOOT  | SPD  | SAD  | HUD   | BRD   | EFF  |                                                 | ---  | ---  | ---  | ---  | ---  | BOOT  |
             * | RESET | ---  | ---  | ---   | ---   | ---  | BT2  | BT3  | ---  | ---  | ---  | ---  | ---  | ---  | ---  | ---  | ---  | RESET |
             * | ---   | ---  | ---  | ---   | ---   |      | BT0  | BT1  | USB  | ---  | ---  | ---  |      | ---  | ---  | ---  | ---  | TO0   |
             */

            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        /* Factory test layer - transparent layer for testing */

        layer_4 {
            /* ---------------------------------------------------------------------------------------------------------------------------------
             * | trans | trans | trans | trans | trans |                                                               | trans | trans | trans | trans | trans |
             * | trans | trans | trans | trans | trans | trans |                                                 | trans | trans | trans | trans | trans | trans |
             * | trans | trans | trans | trans | trans | trans |                                                 | trans | trans | trans | trans | trans | trans |
             * | trans | trans | trans | trans | trans | trans |                                                 | trans | trans | trans | trans | trans | trans |
             * | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans | trans |
             * | trans | trans | trans | trans | trans |       | trans | trans | trans | trans | trans | trans |       | trans | trans | trans | trans | trans |
             */

            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
